name: Composite workflow that runs Continuous Integration pipeline for S3 apps (stage)
description: Runs the Build, Deploy and Test steps in the staging environement

# Define inputs which can be passed from the caller workflow
inputs:
  # build-folder: path to build folder inside repository, if needed
  build-folder:
    required: false
    default: 'build'
    description: The folder to push to aws (build by default)
  # version: app version, if needed
  version:
    required: false
    default: 'latest'
    description: The version of the app that will be deployed
  tag:
    required: true
    description: The specific tag to be deployed
  # AWS credentials and variables
  aws-access-key-id:
    required: true
    description: AWS access key ID
  aws-secret-access-key:
    required: true
    description: AWS secret access key
  aws-region:
    required: true
    description: AWS region
  aws-s3-bucket-name:
    required: true
    description: AWS S3 bucket name
  cloudfront-distribution-id:
    required: true
    description: Cloudfront distribution ID
  # Environment variables
  app-id:
    required: true
    description: Your app ID
  graasp-domain:
    required: true
    description: The Graasp domain to use
  sentry-dsn:
    required: false
    description: Your sentry DSN


runs:
  using: "composite"
  # Set environment variables that are available to the steps of all jobs in the workflow


  # This workflow is made up of three jobs that run sequentially, called test, build and deploy
  steps:

    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.tag }}

# ------------- Build Job ----------------------

    # Build and sync with S3
    # Download and cache distribution of the requested Node.js version, and add it to the PATH
    - name: Setup node
      id: setup-node
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        check-latest: true

    - name: Yarn install and Cache dependencies
      uses: graasp/graasp-deploy/.github/actions/yarn-install-and-cache@v1

    - name: Yarn build dev
      id: build-image
      # Set environment variables required to perform the build. These are only available to this step
      env:
        # Allows to increase Node's max heap size
        NODE_OPTIONS: '--max_old_space_size=8192'
        # Prevent react to generate source maps
        GENERATE_SOURCEMAP: "false"

        REACT_APP_GRAASP_DOMAIN: ${{ inputs.graasp-domain }}
        REACT_APP_GRAASP_APP_ID: ${{ inputs.app-id }}
        REACT_APP_SENTRY_DSN: ${{ inputs.sentry-dsn }}
        REACT_APP_MOCK_API: "false"
        REACT_APP_VERSION: ${{ inputs.tag }}
      # Run a set of commands using the runners shell to perform build
      run: yarn run build
      shell: bash

    # Configure AWS credential and region environment variables for use in next steps
    - name: Configure AWS Credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    # Recursively copy new and updated files from the source directory to the destination
    - name: Sync files with AWS S3 Bucket
      id: sync-s3
      # Set environment variable with the name of the destination bucket to perform sync. It is only available to this step
      env:
        APP_DIR: '${{ inputs.aws-s3-bucket-name }}/${{ inputs.app-id }}/${{ inputs.version }}/'
      run: aws s3 sync ${{ inputs.build-folder }} s3://${APP_DIR} --acl public-read --follow-symlinks --delete
      # --acl public-read makes files publicly readable
      # --follow-symlinks fixes some weird symbolic link problems that may come up
      # --delete permanently deletes files in the S3 bucket that are not present in the latest version of the repository/build.
      shell: bash

# ---------------- Invalidate CloudFront --------------------------------

    # Create a new invalidation
    - name: Invalidate cloudfront distribution
      id: invalidate-cloudfront
      run: aws cloudfront create-invalidation --distribution-id ${{ inputs.cloudfront-distribution-id }} --paths /${{ inputs.app-id }}/${{ inputs.version }}/*
      shell: bash

    # This step runs a single command to execute integation testing
    - name: Test
      run: |
        echo "This is the integrations test step"
      shell: bash

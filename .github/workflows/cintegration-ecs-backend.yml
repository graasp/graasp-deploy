name: Reusable workflow that runs Continuous Integration pipeline for ECS deployments

# Control when the action will run
on:
  # Allow the workflow to be reusable
  workflow_call:
    # Define inputs which can be passed from the caller workflow
    inputs:
      database-logs:
        required: true
        type: string
      ecs-task-definition: # path to task definition json template
        required: true
        type: string
      etherpad-cookie-domain:
        required: true
        type: string
      etherpad-url:
        required: true
        type: string
      h5p-file-storage-type:
        required: true
        type: string
      job-scheduling:
        default: false
        required: false
        type: string
      log-level:
        default: info
        required: false
        type: string
      node-env:
        required: true
        type: string
      node-env-iframely:
        required: true
        type: string
      roarr-log:
        required: true
        type: string
      s3-file-item-plugin:
        required: true
        type: string
      subscriptions-plugin:
        required: true
        type: string
      token-based-auth:
        required: true
        type: string
      websockets-plugin:
        required: true
        type: string

    # Define secrets which can be passed from the caller workflow
    secrets:
      analyzer-client-host:
        required: true
      apps-jwt-secret:
        required: true
      apps-publisher-id:
        required: true
      auth-client-host:
        required: true
      auth-token-expiration-in-minutes:
        required: true
      auth-token-jwt-secret:
        required: true
      # AWS credentials and variables
      aws-access-key-id:
        required: true
      aws-region:
        required: true
      aws-secret-access-key:
        required: true
      builder-client-host:
        required: true
      client-host:
        required: true
      container-image-classifier:
        required: true
      container-image-iframely:
        required: true
      container-name-classifier:
        required: true
      container-name-graasp:
        required: true
      container-name-iframely:
        required: true
      cookie-domain:
        required: true
      cors-origin-regex:
        required: true
      db-host:
        required: true
      db-name:
        required: true
      db-password:
        required: true
      db-read-replica-hosts:
        required: false
      db-username:
        required: true
      ecr-repository:
        required: true
      ecs-cluster:
        required: true
      ecs-service:
        required: true
      embedded-link-item-iframely-href-origin:
        required: true
      etherpad-api-key:
        required: true
      explorer-client-host:
        required: true
      file-storage-root-path:
        required: true
      h5p-content-access-key-id:
        required: true
      h5p-content-bucket-name:
        required: true
      h5p-content-region:
        required: true
      h5p-content-secret-access-key-id:
        required: true
      h5p-path-prefix:
        required: true
      hostname:
        required: true
      image-classifier-api:
        required: true
      jwt-secret:
        required: true
      mailer-config-from-email:
        required: true
      mailer-config-password:
        required: true
      mailer-config-smtp-host:
        required: true
      mailer-config-username:
        required: true
      player-client-host:
        required: true
      port:
        required: true
      public-url:
        required: true
      recaptcha-secret-access-key:
        required: true
      redis-host:
        required: true
      redis-password:
        required: false
      redis-port:
        required: true
      redis-username:
        required: true
      refresh-token-expiration-in-minutes:
        required: true
      refresh-token-jwt-secret:
        required: true
      s3-file-item-access-key-id:
        required: true
      s3-file-item-bucket:
        required: true
      s3-file-item-region:
        required: true
      s3-file-item-secret-access-key:
        required: true
      secure-session-secret-key:
        required: true
      sentry-dsn:
        required: true
      stripe-default-plan-price-id:
        required: true
      stripe-secret-key:
        required: true
      meilisearch-url:
        required: true
      meilisearch-master-key:
        required: true
      meilisearch-rebuild-secret:
        required: true

# Set environment variables that are available to the steps of all jobs in the workflow
env:
  CONTAINER_NAME: ${{ secrets.container-name-graasp }}
  ECR_REPOSITORY: ${{ secrets.ecr-repository }}
  ECS_TASK_DEFINITION: ${{ inputs.ecs-task-definition }}
  NODE_OPTIONS: '--max_old_space_size=8192' # Allows to increase Node's max heap size

# This workflow is made up of three jobs that run sequentially, called test, build and deploy
jobs:
  test:
    name: Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: development

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      # This step runs a single command to execute unitary testing
      - name: Test job
        run: |
          echo "This is the test job"

  # Build image and push to ECR
  build:
    needs: test
    name: Build
    runs-on: ubuntu-latest
    # Define job output that is available to all downstream jobs that depend on this job
    outputs:
      tag: ${{ steps.tag-number.outputs.tag }}
    environment: development

    steps:
      # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      # Set output variable tag with the current checked out ref
      - name: Set Tag Number
        id: tag-number
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      # Configure AWS credential and region environment variables for use in next steps
      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      # Log in the local Docker client
      - name: Login to Amazon ECR
        id: login-ecr-build
        uses: aws-actions/amazon-ecr-login@v2

      # Build and tag the docker image
      - name: Build, tag and push image to AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-build.outputs.registry }}
          IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # Deploy to dev environment
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      # Configure AWS credential and region environment variables for use in next steps
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      # Log in the local Docker client
      - name: Login to Amazon ECR
        id: login-ecr-deploy
        uses: aws-actions/amazon-ecr-login@v2

      # Insert a container image URI into template Amazon ECS task definition JSON file, creating a new task definition file.
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-1
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        # Set environment variables required to create the task definition file. These are only available to this step
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
          IMAGE_TAG: ${{ needs.build.outputs.tag }}
        with:
          task-definition: ${{ inputs.ecs-task-definition }}
          container-name: ${{ secrets.container-name-graasp }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          environment-variables: |
            ANALYZER_CLIENT_HOST=${{ secrets.analyzer-client-host }}
            APPS_JWT_SECRET=${{ secrets.apps-jwt-secret }}
            APPS_PUBLISHER_ID=${{ secrets.apps-publisher-id }}
            AUTH_CLIENT_HOST=${{ secrets.auth-client-host }}
            AUTH_TOKEN_EXPIRATION_IN_MINUTES=${{ secrets.auth-token-expiration-in-minutes }}
            AUTH_TOKEN_JWT_SECRET=${{ secrets.auth-token-jwt-secret }}
            BUILDER_CLIENT_HOST=${{ secrets.builder-client-host }}
            CLIENT_HOST=${{ secrets.client-host }}
            COOKIE_DOMAIN=${{ secrets.cookie-domain }}
            CORS_ORIGIN_REGEX=${{ secrets.cors-origin-regex }}
            DATABASE_LOGS=${{ inputs.database-logs }}
            DB_HOST=${{ secrets.db-host }}
            DB_NAME=${{ secrets.db-name }}
            DB_PASSWORD=${{ secrets.db-password }}
            DB_READ_REPLICA_HOSTS=${{ secrets.db-read-replica-hosts }}
            DB_USERNAME=${{ secrets.db-username }}
            DEPLOY_ENV=development
            EMBEDDED_LINK_ITEM_IFRAMELY_HREF_ORIGIN=${{ secrets.embedded-link-item-iframely-href-origin }}
            ETHERPAD_API_KEY=${{ secrets.etherpad-api-key }}
            ETHERPAD_COOKIE_DOMAIN=${{ inputs.etherpad-cookie-domain }}
            ETHERPAD_URL=${{ inputs.etherpad-url }}
            EXPLORER_CLIENT_HOST=${{ secrets.explorer-client-host }}
            FILE_STORAGE_ROOT_PATH=${{ secrets.file-storage-root-path }}
            H5P_CONTENT_ACCESS_KEY_ID=${{ secrets.h5p-content-access-key-id }}
            H5P_CONTENT_BUCKET=${{ secrets.h5p-content-bucket-name }}
            H5P_CONTENT_REGION=${{ secrets.h5p-content-region }}
            H5P_CONTENT_SECRET_ACCESS_KEY_ID=${{ secrets.h5p-content-secret-access-key-id }}
            H5P_FILE_STORAGE_TYPE=${{ inputs.h5p-file-storage-type }}
            H5P_PATH_PREFIX=${{ secrets.h5p-path-prefix }}
            HOSTNAME=${{ secrets.hostname }}
            IMAGE_CLASSIFIER_API=${{ secrets.image-classifier-api }}
            JOB_SCHEDULING=${{ inputs.job-scheduling }}
            JWT_SECRET=${{ secrets.jwt-secret }}
            LOG_LEVEL=${{ inputs.log-level }}
            MAILER_CONFIG_FROM_EMAIL=${{ secrets.mailer-config-from-email }}
            MAILER_CONFIG_PASSWORD=${{ secrets.mailer-config-password }}
            MAILER_CONFIG_SMTP_HOST=${{ secrets.mailer-config-smtp-host }}
            MAILER_CONFIG_USERNAME=${{ secrets.mailer-config-username }}
            NODE_ENV=${{ inputs.node-env }}
            PLAYER_CLIENT_HOST=${{ secrets.player-client-host }}
            PORT=${{ secrets.port }}
            PUBLIC_URL=${{ secrets.public-url }}
            RECAPTCHA_SECRET_ACCESS_KEY=${{ secrets.recaptcha-secret-access-key }}
            REDIS_HOST=${{ secrets.redis-host }}
            REDIS_PASSWORD=${{ secrets.redis-password }}
            REDIS_PORT=${{ secrets.redis-port }}
            REDIS_USERNAME=${{ secrets.redis-username }}
            REFRESH_TOKEN_EXPIRATION_IN_MINUTES=${{ secrets.refresh-token-expiration-in-minutes }}
            REFRESH_TOKEN_JWT_SECRET=${{ secrets.refresh-token-jwt-secret }}
            ROARR_LOG=${{ inputs.roarr-log }}
            S3_FILE_ITEM_ACCESS_KEY_ID=${{ secrets.s3-file-item-access-key-id }}
            S3_FILE_ITEM_BUCKET=${{ secrets.s3-file-item-bucket }}
            S3_FILE_ITEM_PLUGIN=${{ inputs.s3-file-item-plugin }}
            S3_FILE_ITEM_REGION=${{ secrets.s3-file-item-region }}
            S3_FILE_ITEM_SECRET_ACCESS_KEY=${{ secrets.s3-file-item-secret-access-key }}
            SECURE_SESSION_SECRET_KEY=${{ secrets.secure-session-secret-key }}
            SENTRY_DSN=${{ secrets.sentry-dsn }}
            STRIPE_DEFAULT_PLAN_PRICE_ID=${{ secrets.stripe-default-plan-price-id }}
            STRIPE_SECRET_KEY=${{ secrets.stripe-secret-key }}
            SUBSCRIPTIONS_PLUGIN=${{ secrets.subscriptions-plugin }}
            TOKEN_BASED_AUTH=${{ inputs.token-based-auth }}
            WEBSOCKETS_PLUGIN=${{ inputs.websockets-plugin }}
            MEILISEARCH_URL=${{ secrets.meilisearch-url }}
            MEILISEARCH_MASTER_KEY=${{ secrets.meilisearch-master-key }}
            MEILISEARCH_REBUILD_SECRET=${{ secrets.meilisearch-rebuild-secret }}

      # Modify Amazon ECS task definition with second container
      - name: Modify Amazon ECS task definition
        id: task-def-2
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-1.outputs.task-definition }}
          container-name: ${{ secrets.container-name-iframely }}
          image: ${{ secrets.container-image-iframely}}
          environment-variables: |
            NODE_ENV=${{ inputs.node-env-iframely }}

      # Modify Amazon ECS task definition with third container
      - name: Modify Amazon ECS task definition
        id: task-def-3
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-2.outputs.task-definition }}
          container-name: ${{ secrets.container-name-classifier }}
          image: ${{ secrets.container-image-classifier }}

      # Use latest revision of the task-definition to deploy the application to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-3.outputs.task-definition }}
          service: ${{ secrets.ecs-service }}
          cluster: ${{ secrets.ecs-cluster }}
          wait-for-service-stability: true

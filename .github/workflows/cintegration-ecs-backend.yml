name: Reusable workflow that runs Continuous Integration pipeline for ECS deployments

# Control when the action will run
on:
  # Allow the workflow to be reusable
  workflow_call:
    # Define inputs which can be passed from the caller workflow
    inputs:
      # ecs-task-definition: path to task definition json template. 
      ecs-task-definition:
        required: true
        type: string
      # Environment variables
      apps-plugin:
        required: true
        type: string
      chatbox-plugin:
        required: true
        type: string
      database-logs:
        required: true
        type: string
      embedded-link-item-plugin:
        required: true
        type: string
      node-env:
        required: true
        type: string
      node-env-iframely:
        required: true
        type: string
      public-plugin:
        required: true
        type: string
      roarr-log:
        required: true
        type: string
      s3-file-item-plugin:
        required: true
        type: string
      save-actions:
        required: true
        type: string
      subscriptions-plugin: 
        required: true
        type: string
      token-based-auth:
        required: true
        type: string
      websockets-plugin:
        required: true
        type: string
      test-execution:
        required: false
        type: string
        default: 'true'
    # Define secrets which can be passed from the caller workflow
    secrets:
      # AWS credentials and variables
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      ecs-cluster:
        required: true
      ecs-service:
        required: true
      ecr-repository:
        required: true
      #container and image names that will be included in the cluster
      container-name-graasp:
        required: true
      container-name-iframely:
        required: true
      container-name-classifier:
        required: true
      container-image-iframely:
        required: true
      container-image-classifier:
        required: true
      # Environment variables
      analyzer-client-host:
        required: true
      apps-jwt-secret:
        required: true
      apps-publisher-id:
        required: true
      auth-client-host:
        required: true
      auth-token-expiration-in-minutes:
        required: true
      auth-token-jwt-secret:
        required: true
      avatars-path-prefix:
        required: true
      builder-client-host:
        required: true
      client-host:
        required: true
      cookie-domain:
        required: true
      cors-origin-regex:
        required: true
      email-links-host:
        required: true
      embedded-link-item-iframely-href-origin:
        required: true
      explorer-client-host:
        required: true
      file-storage-root-path:
        required: true
      files-path-prefix:
        required: true
      h5p-content-access-key-id:
        required: true
      h5p-content-bucket-name:
        required: true
      h5p-content-region:
        required: true
      h5p-content-secret-access-key:
        required: true
      h5p-path-prefix:
        required: true
      hidden-tag-id:
        required: true
      hostname:
        required: true
      image-classifier-api:
        required: true
      jwt-secret:
        required: true
      login-item-tag-id:
        required: true
      mailer-config-from-email:
        required: true
      mailer-config-password:
        required: true
      mailer-config-smtp-host:
        required: true
      mailer-config-username:
        required: true
      pg-connection-uri:
        required: true
      player-client-host:
        required: true
      port:
        required: true
      public-tag-id:
        required: true
      published-tag-id:
        required: true
      redis-host:
        required: true
      redis-port:
        required: true
      redis-password:
        required: false
      redis-username:
        required: true
      refresh-token-expiration-in-minutes:
        required: true
      refresh-token-jwt-secret:
        required: true
      s3-file-item-access-key-id:
        required: true
      s3-file-item-bucket:
        required: true
      s3-file-item-region:
        required: true
      s3-file-item-secret-access-key:
        required: true
      secure-session-secret-key:
        required: true
      stripe-secret-key:
        required: true
      stripe-default-plan-price-id:
        required: true
      thumbnails-path-prefix:
        required: true
      mock-secure-session-secret-key:
        required: true
      mock-jwt-secret:
        required: true
      mock-refresh-token-jwt-secret:
        required: true
      mock-auth-token-jwt-secret:
        required: true

# Saving computation time by stopping obsolete workflows
concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

# Set environment variables that are available to the steps of all jobs in the workflow
env:        
  ECS_TASK_DEFINITION: ${{ inputs.ecs-task-definition }}
  CONTAINER_NAME: ${{ secrets.container-name-graasp }}
  ECR_REPOSITORY: ${{ secrets.ecr-repository }}
  # Allows to increase Node's max heap size
  NODE_OPTIONS: '--max_old_space_size=8192'

# This workflow is made up of three jobs that run sequentially, called build, test, and deploy
jobs:
  # Build image and cache dist directory
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3

    # Download and cache distribution of the requested Node.js version, and add it to the PATH
    - name: Setup node
      id: setup-node
      uses: actions/setup-node@v3
      with:
        node-version: 16.x

    # Get the yarn cache path.
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: |
        echo "::set-output name=dir::$(yarn config get cacheFolder)"

    # Cache dependencies to speed up workflow. Only for development branches
    # path: The file path on the runner to cache or restore.
    # key: Create cache key using the hashFiles function to create a new cache when dependencies change.
    # restore-keys: An ordered list of alternative keys to use for finding the cache if no cache hit occurred for key
    - name: Cache dependencies
      id: cache-yarn
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    # Install dependencies
    - name: Install dependencies and build
      run: yarn add --cached

    # Build image
    - name: Yarn build
      run: yarn build --if-present

    # Cache build to share it between jobs
    # path: The file path on the runner to cache or restore.
    # key: Create cache key using the branch and run_id to create a new build for every run.
    - name: Cache build
      id: cache-build
      uses: actions/cache@v3
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.ref_name }}-${{ github.run_id }}

  test:
    name: Test
    needs: build
    # This job is executed only when the user manually selects this option. If not, the code will be deployed without testing.
    if: ${{ (inputs.test-execution == 'true') ||  (github.event_name == 'push') }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3

    # Download and cache distribution of the requested Node.js version, and add it to the PATH
    - name: Setup node
      id: setup-node
      uses: actions/setup-node@v3
      with:
        node-version: 16.x

    # Get the yarn cache path.
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: |
        echo "::set-output name=dir::$(yarn config get cacheFolder)"

    # Cache dependencies to speed up workflow. Only for development branches
    # path: The file path on the runner to cache or restore.
    # key: Create cache key using the hashFiles function to create a new cache when dependencies change.
    # restore-keys: An ordered list of alternative keys to use for finding the cache if no cache hit occurred for key
    - name: Cache dependencies
      id: cache-yarn
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    # Cache build to re-use it from previous jobs
    - name: Cache build
      id: cache-build
      uses: actions/cache@v3
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.ref_name }}-${{ github.run_id }}

    # Install dependencies
    - name: Install dependencies and build
      run: yarn add --cached

    - name: yarn test
      run: 
        yarn test
      env:
        CI: true
        # random keys
        SECURE_SESSION_SECRET_KEY: ${{ secrets.mock-secure-session-secret-key }}
        JWT_SECRET: ${{ secrets.mock-jwt-secret }}
        REFRESH_TOKEN_JWT_SECRET: ${{ secrets.mock-refresh-token-jwt-secret }}
        AUTH_TOKEN_JWT_SECRET: ${{ secrets.mock-auth-token-jwt-secret }}
        STRIPE_SECRET_KEY: ${{ secrets.stripe-secret-key }}
        STRIPE_DEFAULT_PLAN_PRICE_ID: ${{ secrets.stripe-default-plan-price-id }}
        FILE_STORAGE_ROOT_PATH: /
        H5P_PATH_PREFIX: h5p
        SAVE_ACTIONS: true
        BUILDER_CLIENT_HOST: 'http://localhost:3111'
        PLAYER_CLIENT_HOST: 'http://localhost:3112'
        EXPLORER_CLIENT_HOST: 'http://localhost:3113'

  # Deploy to dev environment
  deploy: 
    name: Deploy
    needs: [build, test]
    # This job is executed only when the build job has been successful and either the user has manually dispatched the workflow or it is a push to the default branch (master). 
    if: ${{ always() && needs.build.result == 'success' && ((github.event_name == 'workflow_dispatch') || (github.ref_name == 'master')) }}
    runs-on: ubuntu-latest

    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v2

    # Set output variable tag with the current checked out ref
    - name: Set Tag Number
      id: tag-number
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    # Configure AWS credential and region environment variables for use in next steps
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ secrets.aws-region }}

    # Log in the local Docker client
    - name: Login to Amazon ECR
      id: login-ecr-deploy
      uses: aws-actions/amazon-ecr-login@v1

    # Build and tag the docker image 
    - name: Build, tag and push image to AWS ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
        IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f .stagingcontainer/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Insert a container image URI into template Amazon ECS task definition JSON file, creating a new task definition file.
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def-1
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      # Set environment variables required to create the task definition file. These are only available to this step
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
        IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
      with:
          task-definition: ${{ inputs.ecs-task-definition }}
          container-name: ${{ secrets.container-name-graasp }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          environment-variables: |
            ANALYZER_CLIENT_HOST=${{ secrets.analyzer-client-host }}
            APPS_JWT_SECRET=${{ secrets.apps-jwt-secret }}
            APPS_PLUGIN=${{ inputs.apps-plugin }}
            APPS_PUBLISHER_ID=${{ secrets.apps-publisher-id }}
            AUTH_CLIENT_HOST=${{ secrets.auth-client-host }}
            AUTH_TOKEN_EXPIRATION_IN_MINUTES=${{ secrets.auth-token-expiration-in-minutes }}
            AUTH_TOKEN_JWT_SECRET=${{ secrets.auth-token-jwt-secret }}
            AVATARS_PATH_PREFIX=${{ secrets.avatars-path-prefix }}
            BUILDER_CLIENT_HOST=${{ secrets.builder-client-host }}
            CHATBOX_PLUGIN=${{ inputs.chatbox-plugin }}
            CLIENT_HOST=${{ secrets.client-host }}
            COOKIE_DOMAIN=${{ secrets.cookie-domain }}
            CORS_ORIGIN_REGEX=${{ secrets.cors-origin-regex }}
            DATABASE_LOGS=${{ inputs.database-logs }}
            EMAIL_LINKS_HOST=${{ secrets.email-links-host }}
            EMBEDDED_LINK_ITEM_IFRAMELY_HREF_ORIGIN=${{ secrets.embedded-link-item-iframely-href-origin }}
            EMBEDDED_LINK_ITEM_PLUGIN=${{ inputs.embedded-link-item-plugin }}
            EXPLORER_CLIENT_HOST=${{ secrets.explorer-client-host }}
            FILE_STORAGE_ROOT_PATH=${{ secrets.file-storage-root-path }}
            FILES_PATH_PREFIX=${{ secrets.files-path-prefix }}
            H5P_CONTENT_ACCESS_KEY_ID=${{ secrets.h5p-content-access-key-id }}
            H5P_CONTENT_BUCKET=${{ secrets.h5p-content-bucket-name }}
            H5P_CONTENT_REGION=${{ secrets.h5p-content-region }}
            H5P_CONTENT_SECRET_ACCESS_KEY=${{ secrets.h5p-content-secret-access-key }}
            H5P_PATH_PREFIX=${{ secrets.h5p-path-prefix }}
            HIDDEN_TAG_ID=${{ secrets.hidden-tag-id }}
            HOSTNAME=${{ secrets.hostname }}
            IMAGE_CLASSIFIER_API=${{ secrets.image-classifier-api }}
            JWT_SECRET=${{ secrets.jwt-secret }}
            LOGIN_ITEM_TAG_ID=${{ secrets.login-item-tag-id }}
            MAILER_CONFIG_FROM_EMAIL=${{ secrets.mailer-config-from-email }}
            MAILER_CONFIG_PASSWORD=${{ secrets.mailer-config-password }}
            MAILER_CONFIG_SMTP_HOST=${{ secrets.mailer-config-smtp-host }}
            MAILER_CONFIG_USERNAME=${{ secrets.mailer-config-username }}
            NODE_ENV=${{ inputs.node-env }}
            PG_CONNECTION_URI=${{ secrets.pg-connection-uri }}
            PLAYER_CLIENT_HOST=${{ secrets.player-client-host }}
            PORT=${{ secrets.port }}
            PUBLIC_PLUGIN=${{ inputs.public-plugin }}
            PUBLIC_TAG_ID=${{ secrets.public-tag-id }}
            PUBLISHED_TAG_ID=${{ secrets.published-tag-id }}
            REDIS_HOST=${{ secrets.redis-host }}
            REDIS_PASSWORD=${{ secrets.redis-password }}
            REDIS_PORT=${{ secrets.redis-port }}
            REDIS_USERNAME=${{ secrets.redis-username }}
            REFRESH_TOKEN_EXPIRATION_IN_MINUTES=${{ secrets.refresh-token-expiration-in-minutes }}
            REFRESH_TOKEN_JWT_SECRET=${{ secrets.refresh-token-jwt-secret }}
            ROARR_LOG=${{ inputs.roarr-log }}
            S3_FILE_ITEM_ACCESS_KEY_ID=${{ secrets.s3-file-item-access-key-id }}
            S3_FILE_ITEM_BUCKET=${{ secrets.s3-file-item-bucket }}
            S3_FILE_ITEM_PLUGIN=${{ inputs.s3-file-item-plugin }}
            S3_FILE_ITEM_REGION=${{ secrets.s3-file-item-region }}
            S3_FILE_ITEM_SECRET_ACCESS_KEY=${{ secrets.s3-file-item-secret-access-key }}
            SAVE_ACTIONS=${{ inputs.save-actions }}
            SECURE_SESSION_SECRET_KEY=${{ secrets.secure-session-secret-key }}
            STRIPE_SECRET_KEY=${{ secrets.stripe-secret-key }}
            STRIPE_DEFAULT_PLAN_PRICE_ID=${{ secrets.stripe-default-plan-price-id }}
            SUBSCRIPTIONS_PLUGIN=${{ secrets.subscriptions-plugin }}
            THUMBNAILS_PATH_PREFIX=${{ secrets.thumbnails-path-prefix }}
            TOKEN_BASED_AUTH=${{ inputs.token-based-auth }}
            WEBSOCKETS_PLUGIN=${{ inputs.websockets-plugin }}

    # Modify Amazon ECS task definition with second container
    - name: Modify Amazon ECS task definition
      id: task-def-2
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: ${{ steps.task-def-1.outputs.task-definition }}
          container-name: ${{ secrets.container-name-iframely }}
          image: ${{ secrets.container-image-iframely}}
          environment-variables: |
            NODE_ENV=${{ inputs.node-env-iframely }}

    # Modify Amazon ECS task definition with third container
    - name: Modify Amazon ECS task definition
      id: task-def-3
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: ${{ steps.task-def-2.outputs.task-definition }}
          container-name: ${{ secrets.container-name-classifier }}
          image: ${{ secrets.container-image-classifier }}

    # Use latest revision of the task-definition to deploy the application to ECS
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.task-def-3.outputs.task-definition }}
          service: ${{ secrets.ecs-service }}
          cluster: ${{ secrets.ecs-cluster }}
          wait-for-service-stability: true

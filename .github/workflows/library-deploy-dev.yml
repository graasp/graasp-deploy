name: Reusable workflow that deploys to development ECS

# Control when the action will run
on:
  # Allow the workflow to be reusable
  workflow_call:
    # Define inputs which can be passed from the caller workflow
    inputs:
      # automatic npm env variables
      app-name:
        required: true
        type: string
      app-version:
        required: true
        type: string
      next-public-graasp-account-host:
        required: true
        type: string
      # ecs-task-definition: path to task definition json template
      ecs-task-definition:
        required: true
        type: string
    # Define secrets which can be passed from the caller workflow
    secrets:
      # AWS credentials and variables
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      ecs-cluster:
        required: true
      ecs-service:
        required: true
      ecr-repository:
        required: true
      # container name that will be included in the cluster
      container-name-library:
        required: true
      # Environment variables
      next-public-api-host:
        required: true
      next-public-ga-measurement-id:
        required: true
      next-public-graasp-analytics-host:
        required: true
      next-public-graasp-auth-host:
        required: true
      next-public-graasp-builder-host:
        required: true
      next-public-graasp-perform-host:
        required: true
      next-public-graasper-id:
        required: true
      next-public-sentry-dsn:
        required: false
      next-public-sentry-env:
        required: false
      next-public-domain:
        required: false
      next-public-show-notifications:
        required: false
      port:
        required: true

# Set environment variables that are available to the steps of all jobs in the workflow
env:
  ECR_REPOSITORY: ${{ secrets.ecr-repository }}
  # Allows to increase Node's max heap size
  NODE_OPTIONS: '--max_old_space_size=8192'

# This workflow is made up of three jobs that run sequentially, called test, build and deploy
jobs:
  test:
    name: Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      # This step runs a single command to execute unitary testing
      - name: Test job
        run: |
          echo "This is the test job"

  # Build image and push to ECR
  build:
    needs: test
    name: Build
    runs-on: ubuntu-latest
    # Define job output that is available to all downstream jobs that depend on this job
    outputs:
      tag: ${{ steps.tag-number.outputs.tag }}

    steps:
      # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      # Set output variable tag with the current checked out ref
      - name: Set Tag Number
        id: tag-number
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      # Configure AWS credential and region environment variables for use in next steps
      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      # Log in the local Docker client
      - name: Login to Amazon ECR
        id: login-ecr-build
        uses: aws-actions/amazon-ecr-login@v2

      # Build and tag the docker image
      - name: Build and tag image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-build.outputs.registry }}
          IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
          NEXT_PUBLIC_API_HOST: ${{ secrets.next-public-api-host }}
          NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ secrets.next-public-google-analytics-id }}
          NEXT_PUBLIC_GRAASP_ANALYTICS_HOST: ${{ secrets.next-public-graasp-analytics-host }}
          NEXT_PUBLIC_GRAASP_AUTH_HOST: ${{ secrets.next-public-graasp-auth-host }}
          NEXT_PUBLIC_GRAASP_ACCOUNT_HOST: ${{ inputs.next-public-graasp-account-host }}
          NEXT_PUBLIC_GRAASP_BUILDER_HOST: ${{ secrets.next-public-graasp-builder-host }}
          NEXT_PUBLIC_GRAASP_PERFORM_HOST: ${{ secrets.next-public-graasp-perform-host }}
          NEXT_PUBLIC_GRAASPER_ID: ${{ secrets.next-public-graasper-id }}
          NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.next-public-ga-measurement-id }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.next-public-sentry-dsn }}
          NEXT_PUBLIC_SENTRY_ENV: ${{ secrets.next-public-sentry-env }}
          NEXT_PUBLIC_DOMAIN: ${{ secrets.next-public-domain }}
          NEXT_PUBLIC_SHOW_NOTIFICATIONS: ${{ secrets.next-public-show-notifications }}
          NEXT_PUBLIC_APP_NAME: ${{ inputs.app-name }}
          NEXT_PUBLIC_APP_VERSION: ${{ inputs.app-version }}
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_HOST=$NEXT_PUBLIC_API_HOST \
            --build-arg NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=$NEXT_PUBLIC_GOOGLE_ANALYTICS_ID \
            --build-arg NEXT_PUBLIC_GRAASP_ANALYTICS_HOST=$NEXT_PUBLIC_GRAASP_ANALYTICS_HOST \
            --build-arg NEXT_PUBLIC_GRAASP_AUTH_HOST=$NEXT_PUBLIC_GRAASP_AUTH_HOST \
            --build-arg NEXT_PUBLIC_GRAASP_ACCOUNT_HOST=$NEXT_PUBLIC_GRAASP_ACCOUNT_HOST \
            --build-arg NEXT_PUBLIC_GRAASP_BUILDER_HOST=$NEXT_PUBLIC_GRAASP_BUILDER_HOST \
            --build-arg NEXT_PUBLIC_GRAASP_PERFORM_HOST=$NEXT_PUBLIC_GRAASP_PERFORM_HOST \
            --build-arg NEXT_PUBLIC_GRAASPER_ID=$NEXT_PUBLIC_GRAASPER_ID \
            --build-arg NEXT_PUBLIC_GA_MEASUREMENT_ID=$NEXT_PUBLIC_GA_MEASUREMENT_ID \
            --build-arg NEXT_PUBLIC_SENTRY_DSN=$NEXT_PUBLIC_SENTRY_DSN \
            --build-arg NEXT_PUBLIC_SENTRY_ENV=$NEXT_PUBLIC_SENTRY_ENV \
            --build-arg NEXT_PUBLIC_DOMAIN=$NEXT_PUBLIC_DOMAIN \
            --build-arg NEXT_PUBLIC_SHOW_NOTIFICATIONS=$NEXT_PUBLIC_SHOW_NOTIFICATIONS \
            --build-arg NEXT_PUBLIC_APP_NAME=$NEXT_PUBLIC_APP_NAME \
            --build-arg NEXT_PUBLIC_APP_VERSION=$NEXT_PUBLIC_APP_VERSION \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      # push to AWS ECR
      - name: Push image to AWS ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-build.outputs.registry }}
          IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # Deploy to dev environment
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      # Configure AWS credential and region environment variables for use in next steps
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      # Log in the local Docker client
      - name: Login to Amazon ECR
        id: login-ecr-deploy
        uses: aws-actions/amazon-ecr-login@v2

      # Insert a container image URI into template Amazon ECS task definition JSON file, creating a new task definition file.
      - name: Fill Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        # Set environment variables required to create the task definition file. These are only available to this step
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
          IMAGE_TAG: ${{ needs.build.outputs.tag }}
        with:
          task-definition: ${{ inputs.ecs-task-definition }}
          container-name: ${{ secrets.container-name-library }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          environment-variables: |
            NEXT_PUBLIC_API_HOST=${{ secrets.next-public-api-host }}
            NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=${{ secrets.next-public-google-analytics-id }}
            NEXT_PUBLIC_GRAASP_ANALYTICS_HOST=${{ secrets.next-public-graasp-analytics-host }}
            NEXT_PUBLIC_GRAASP_AUTH_HOST=${{ secrets.next-public-graasp-auth-host }}
            NEXT_PUBLIC_GRAASP_ACCOUNT_HOST=${{ inputs.next-public-graasp-account-host }}
            NEXT_PUBLIC_GRAASP_BUILDER_HOST=${{ secrets.next-public-graasp-builder-host }}
            NEXT_PUBLIC_GRAASP_PERFORM_HOST=${{ secrets.next-public-graasp-perform-host }}
            NEXT_PUBLIC_GRAASPER_ID=${{ secrets.next-public-graasper-id }}
            NEXT_PUBLIC_GA_MEASUREMENT_ID=${{ secrets.next-public-ga-measurement-id }}
            NEXT_PUBLIC_SENTRY_DSN=${{ secrets.next-public-sentry-dsn }}
            NEXT_PUBLIC_SENTRY_ENV=${{ secrets.next-public-sentry-env }}
            NEXT_PUBLIC_DOMAIN=${{ secrets.next-public-domain }}
            NEXT_PUBLIC_SHOW_NOTIFICATIONS=${{ secrets.next-public-show-notifications }}
            NEXT_PUBLIC_APP_NAME=${{ inputs.app-name }}
            NEXT_PUBLIC_APP_VERSION=${{ inputs.app-version }}
            PORT=${{ secrets.port }}

      # Use latest revision of the task-definition to deploy the application to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ecs-service }}
          cluster: ${{ secrets.ecs-cluster }}
          wait-for-service-stability: true

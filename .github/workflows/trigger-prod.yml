# This workflow takes the latest YYYYMMddhhmm-release-versions.json file inside the release-versions folder
# and triggers all the cdeployment workflows in the different repositories.
name: Deploy stack to prod

# Controls when the action will run.
on:
  # Allow the workflow to be automatically triggered every Thursday at 9 a.m.
  schedule:
    - cron: '0 9 * * 4'
  # Allow the workflow to be manually triggered
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      stack:
        # Description to be shown in the UI instead of 'stack'
        description: '(Optional) Specify a stack. Format: YYYYMMddhhmm-release-versions.json'
        # Default value if no value is explicitly provided
        default: ''
        # Input does not have to be provided for the workflow to run
        required: false

env:
  STACK: ${{ inputs.stack }}

jobs:
  generate-matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      latest: ${{ steps.latest-release-file.outputs.latest }}

    steps:
    - name: Deploying a specific stack
      if: "${{ env.STACK != '' }}"
      run: echo ${{ env.STACK }}

    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3

    # Set the appropriate job output based on the stack that is being deployed: custom or latest.
    - name: Get latest release versions file
      id: latest-release-file
      run: |
        if [[ "${{ inputs.stack }}" == "" ]]; then
          cd ./release-versions
          LATEST_FILE_NAME_RELEASE=$(ls -Ar | head -n 1)
          echo "latest=$LATEST_FILE_NAME_RELEASE" >> $GITHUB_OUTPUT
        fi
        if [[ "${{ inputs.stack }}" != "" ]]; then
          LATEST_FILE_NAME_RELEASE=${{ env.STACK }}
          echo "latest=$LATEST_FILE_NAME_RELEASE" >> $GITHUB_OUTPUT
        fi

    # Install the python version needed
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    # Run compare.py to get the difference between the newer and the already deployed versions
    - name: Execute py script
      env:
        LATEST_FILE_NAME_RELEASE: ${{ steps.latest-release-file.outputs.latest }}
      run: |
        python scripts/compare.py release-versions/$LATEST_FILE_NAME_RELEASE deployed/current-production-versions.json

    # Load latest json from a file
    - name: Generate matrix
      id: set-matrix
      run: |
        STACK_LENGTH=$(cat diff.json | jq '.include | length')
        if [[ "$STACK_LENGTH" -gt 0 ]]; then
          LATEST_FILE=$(cat diff.json)
          echo "matrix=$LATEST_FILE" >> $GITHUB_OUTPUT
          echo '### New versions detected! :bookmark:' >> $GITHUB_STEP_SUMMARY
          # this line joins the repo - tag values to produce a nice output
          NEW_STACK=$(cat diff.json | jq -r '[ .include[] | {repository,tag} | join(" - tag: ") ] |  join("  \n")')
          echo "$NEW_STACK" >> $GITHUB_STEP_SUMMARY
        else
          echo '### No new versions detected! :hankey:' >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  dispatch:
    name: Dispatch Continuous Deployment workflows
    needs: generate-matrix
    runs-on: ubuntu-latest
    # The environment that the job will reference
    environment:
      name: production
    strategy:
      # Uses fromJson to parse the output and set a matrix variable.
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    steps:
    - name: Set json output
      id: set-json
      env:
        TAG: ${{matrix.tag}}
      run: |
        JSON=$(jq -c --null-input --arg tag "$TAG" '{"tag": $tag}')
        echo "json=$JSON" >> $GITHUB_OUTPUT

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
        # this token has to be a PAT because we dispatch to another repo
        # https://github.com/peter-evans/repository-dispatch
        # this token expires every now and then, so it has to be renew
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: ${{ matrix.repository }}
        event-type: production-deployment
        client-payload: ${{steps.set-json.outputs.json}}

    - name: Generate step summary markdown
      env:
        BADGE: 'https://badgen.net/badge/icon/See%20workflow/blue?icon=github&label'
      run: |
        echo '[![See workflow](${{env.BADGE}})](https://github.com/${{matrix.repository}}/actions/)' >> $GITHUB_STEP_SUMMARY

  update:
    name: Update stack to production ready
    needs: [generate-matrix, dispatch]
    runs-on: ubuntu-latest
    # The environment that the job will reference
    environment:
      name: production
    env:
      LATEST_FILE_NAME_RELEASE: ${{ needs.generate-matrix.outputs.latest }}
    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        ref: "main"

    # Create new production-versions.json file. Use jq to write to stdout and pipe the output to a newly created file.
    - name: Create new production-versions.json file name
      run: |
        PRODUCTION_FILE_NAME=$(echo "`date +"%Y%m%d%H%M"`"-production-versions.json)
        echo "PRODUCTION_FILE_NAME=$PRODUCTION_FILE_NAME" >> $GITHUB_ENV

    - name: Update latest production versions file
      id: update-latest-production-file
      env:
        PRODUCTION_FILE_NAME: ${{ env.PRODUCTION_FILE_NAME }}
      run: |
        cd ./release-versions
        cp $LATEST_FILE_NAME_RELEASE ../production-versions/$PRODUCTION_FILE_NAME
        cp $LATEST_FILE_NAME_RELEASE ../deployed/current-production-versions.json

    - name: Keep changes in detached HEAD step
      run: |
        git branch tmp
        git fetch
        git pull
        git checkout main
        git merge tmp

    - name: Commit step
      id: commit
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "chore(deploy): deploy new stack to production environment"

    - name: Generate job summary markdown
      run: |
        echo '### New stack deployed! :rocket:' >> $GITHUB_STEP_SUMMARY

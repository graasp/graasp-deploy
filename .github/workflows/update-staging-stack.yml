# This workflow creates a new YYYYMMddhhmm-staging-versions.json file inside the staging-versions folder
# with the latest tag pushed by the repository that triggered the workflow.
name: Update staging stack

# Controls when the action will run
on:
  # Triggers the workflow on repository_dispatch events but only for the update-staging-version event
  repository_dispatch:
    types: [update-staging-version]

# This workflow is made up of one job called create
jobs:
  # Create a new YYYYMMddhhmm-staging-versions.json file with latest pushed tag.
  create:
    name: Create staging-versions.json file
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # ensure only one instance of the workflow runs at a time
    concurrency: update-staging-stack
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: "main"

    # Create new staging-versions.json file. Use jq to write to stdout and pipe the output to a newly created file.
    # If the file already contains the repository, update the tag value
    # If the file does not contain the repository, include both the repository and tag
    - name: Create new staging-versions.json file
      # Set environment variables required to create the file. These are only available to this step
      env:
        # REPOSITORY: repository that will update current version.
        REPOSITORY: ${{ github.event.client_payload.repository }}
        # TAG: tag pushed by the repository.
        TAG: ${{ github.event.client_payload.tag }}
      run: |
        jq --arg tag "$TAG" --arg repository "$REPOSITORY" \
        'if ((.include[] | select(.repository == $repository)) // null) != null then (.include[] | select(.repository == $repository) | .tag) |= $tag else .include += [{"repository": $repository, "tag": $tag}] end' \
        ./staging-versions/latest.json > ./staging-versions/latest.json

    # Detect changed files during a Workflow run and commit and push them back to the GitHub repository
    - name: Commit step
      id: commit
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
         # Commit message for the created commit.
        commit_message: 'chore: updated staging stack'

    - name: Summary step
      env:
        # REPOSITORY: repository that will update current version.
        REPOSITORY: ${{ github.event.client_payload.repository }}
      run: |
        LATEST_FILE_LINK="https://github.com/${{ github.repository }}/blob/main/staging-versions/latest.json"
        echo "### :postbox: Updated $REPOSITORY to ${{ github.event.client_payload.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "[Go to generated staging version file]($LATEST_FILE_LINK)" >> $GITHUB_STEP_SUMMARY

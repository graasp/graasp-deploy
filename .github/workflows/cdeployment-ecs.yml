name: Reusable workflow that runs Continuous Deployment pipeline for ECS

# Control when the action will run
on:
  # Allow the workflow to be reusable
  workflow_call:
    # Define inputs which can be passed from the caller workflow
    inputs:
      # ecs-task-definition: path to task definition json template. 
      ecs-task-definition:
        required: true
        type: string
    # Define secrets which can be passed from the caller workflow
    secrets:
      # AWS credentials and variables
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true           
      ecs-cluster:
        required: true
      ecs-service:
        required: true
      ecr-repository:
        required: true
      # container name that will be included in the cluster
      container-name:
        required: true
      # Request environment variables. Example:
      # env-variable-name:
      #   required: true or false

# Set environment variables that are available to the steps of all jobs in the workflow
env:        
  ECS_TASK_DEFINITION: ${{ inputs.ecs-task-definition }}
  CONTAINER_NAME: ${{ secrets.container-name}}
  ECR_REPOSITORY: ${{ secrets.ecr-repository }}
  # Allows to increase Node's max heap size
  NODE_OPTIONS: '--max_old_space_size=8192'

# This workflow is made up of one job called: build-deploy
jobs:
  # Build image, push to ECR and deploy to production environment
  build-deploy:
    name: Build-push-deploy
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # The environment that the job will reference
    environment: 
      name: production
    # Define job output that is available to all downstream jobs that depend on this job
    outputs: 
      tag: ${{ steps.tag-number.outputs.tag }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v2

    # Set output variable tag with the current checked out ref
    - name: Set Tag Number
      id: tag-number
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    # Configure AWS credential and region environment variables for use in next steps
    - name: Configure AWS Credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ secrets.aws-region }}

    # Log in the local Docker client
    - name: Login to Amazon ECR
      id: login-ecr-build
      uses: aws-actions/amazon-ecr-login@v1

    # Build and tag the docker image
    - name: Build, and tag image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-build.outputs.registry }}
        IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Insert a container image URI into template Amazon ECS task definition JSON file, creating a new task definition file.
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      # Set environment variables required to create the task definition file. These are only available to this step
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
        IMAGE_TAG: ${{ needs.build.outputs.tag }}
      with:
          task-definition: ${{ inputs.ecs-task-definition }}
          container-name: ${{ secrets.container-name }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          # Uncomment next lines to set environment variables here.
          # Follow the specified format. 
          # environment-variables: |
          #   ENV_VARIABLE=${{ secrets.env-variable-name }}

    # Uncomment and replicate the following section for every container you want to add to your ECS deployment. 
    # # Modify Amazon ECS task definition with second container
    # - name: Modify Amazon ECS task definition
    #   id: task-def-2
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #       task-definition: ${{ steps.task-def.outputs.task-definition }}
    #       container-name: ${{ secrets.container-name-iframely }}
    #       image: ${{ secrets.container-image-iframely}}
    #       # Uncomment next lines to set environment variables here.
    #       # Follow the specified format. 
    #       # environment-variables: |
    #       #   ENV_VARIABLE_2=${{ secrets.env-variable-name-2 }}

    # Use latest revision of the task-definition to deploy the application to ECS
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ecs-service }}
          cluster: ${{ secrets.ecs-cluster }}
          wait-for-service-stability: true       

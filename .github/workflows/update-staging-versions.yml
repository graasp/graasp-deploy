# This workflow creates a new YYYYMMddhhmm-stagingVersions.json file inside the staging-versions folder 
# with the latest tag pushed by the repository that triggered the workflow. 
name: Update staging versions

# Controls when the action will run
on:
  # Triggers the workflow on repository_dispatch events but only for the update-staging-version event
  repository_dispatch:
    types: [update-staging-version]

# This workflow is made up of one job called create
jobs:
  # Create a new YYYYMMddhhmm-stagingVersions.json file with latest pushed tag. 
  create:
    name: Create stagingVersions.josn file
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v2

    # Get the latest modified file in the staging-versions working directory.
    - name: Get latest versions file
      id: latest-file
      run: |
        cd ./staging-versions
        LATEST_FILE_NAME=$(ls -Ar | head -n 1)
        echo ::set-output name=latest::${LATEST_FILE_NAME}

    # Create new stagingVersions.json file. Use jq to write to stdout and pipe the output to a newly created file.
    - name: Create new stagingVersions.json file
      # Set environment variables required to create the file. These are only available to this step
      env:
        # REPOSITORY: repository that will update current version. 
        REPOSITORY: ${{ github.event.client_payload.repository }}
        # TAG: tag pushed by the repository. 
        TAG: ${{ github.event.client_payload.tag }}
        # LATEST_FILE_NAME: latest stagingVersions.json file created. It will be used as template. 
        LATEST_FILE_NAME: ${{ steps.latest-file.outputs.latest }}
      run: | 
        FILE_NAME=$(echo "`date +"%Y%m%d%H%M"`"-stagingVersions.json)
        echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV
        jq --arg tag "$TAG" --arg repository "$REPOSITORY" \
        '(.include[] | select(.repository == $repository) | .tag) |= $tag' ./staging-versions/$LATEST_FILE_NAME > ./staging-versions/$FILE_NAME
    
    # Detect changed files during a Workflow run and commit and push them back to the GitHub repository
    - name: Commit step
      id: commit
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
         # Commit message for the created commit.
        commit_message: ${{ env.FILE_NAME }}



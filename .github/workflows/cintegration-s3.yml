name: Reusable workflow that runs Continuous Integration pipeline for S3 deployments. 

# Control when the action will run
on:
  # Allow the workflow to be reusable
  workflow_call:
    # Define inputs which can be passed from the caller workflow
    inputs:
      # build-folder: path to build folder inside repository, if needed
      build-folder:
        required: false
        default: 'build'
        type: string
      graasp-compose-host-test:
        required: false
        type: string
      graasp-authentication-host-test:
        required: false
        type: string
      node-env-test:
        required: false
        type: string
      hidden-item-tag-id-test:
        required: false
        type: string
      public-tag-id-test:
        required: false
        type: string
      next-public-google-analytics-id-test:
        required: false
        type: string
      next-public-published-tag-id-test:
        required: false
        type: string
      next-public-api-host-test:
        required: false
        type: string
      next-public-graasp-perform-host-test:
        required: false
        type: string
      next-public-graasp-authentication-host-test:
        required: false
        type: string
      next-public-node-env-test:
        required: false
        type: string
      graasper-id-test:
        required: false
        type: string
      graasp-domain-test:
        required: false
        type: string
      graasp-app-id-test:
        required: false
        type: string
      mock-api-test:
        required: false
        type: string
      enable-mock-api-test:
        required: false
        type: string
    # Define secrets which can be passed from the caller workflow
    secrets:
      # AWS credentials and variables
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      aws-s3-bucket-name:
        required: true
      cloudfront-distribution-id:
        required: true
      # Environment variables
      api-host:
        required: false
      authentication-host:
        required: false
      domain:
        required: false
      ga-measurement-id:
        required: false
      google-key:
        required: false
      graasp-analyzer-host:
        required: false
      graasp-compose-host:
        required: false
      graasp-explorer-host:
        required: false
      graasp-perform-host:
        required: false
      h5p-integration-url:
        required: false
      hidden-item-tag-id:
        required: false
      port:
        required: false
      sentry-dsn:
        required: false
      show-notifications:
        required: false
      stripe-publishable-key:
        required: false
      api-host-test: 
        required: false


# Set environment variables that are available to the steps of all jobs in the workflow
env:
  BUILD_FOLDER: '${{ inputs.build-folder }}'
  # Allows to increase Node's max heap size
  NODE_OPTIONS: '--max_old_space_size=8192'

# This workflow is made up of three jobs that run sequentially, called test, build and deploy
jobs:
  # Build and sync with S3
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3

    # Download and cache distribution of the requested Node.js version, and add it to the PATH
    - name: Setup node
      id: setup-node
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        check-latest: true

    # - name: Get Yarn cache path
    #   id: yarn-cache-path
    #   run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache dependencies
      id: cache-node-modules
      uses: actions/cache@v3
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ github.ref_name }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
            ${{ runner.os }}-modules-${{ github.ref_name }}-
            ${{ runner.os }}-modules-

    - name: Cache Cypress Binary
      id: cache-cypress-binary
      uses: actions/cache@v3
      with:
        path: ~/.cache/Cypress
        key: ${{ runner.os }}-cypress-binary-${{ github.ref_name }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
            ${{ runner.os }}-cypress-binary-${{ github.ref_name }}-
            ${{ runner.os }}-cypress-binary-

    - name: Install dependencies
      id: install
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: yarn install

    - name: Yarn build dev
      id: build-image
      # Set environment variables required to perform the build. These are only available to this step
      env: 
        REACT_APP_API_HOST: ${{ secrets.api-host }}
        PORT: ${{ secrets.port }}
        REACT_APP_GOOGLE_KEY_DEV: ${{ secrets.google-key }}
        REACT_APP_SHOW_NOTIFICATIONS: ${{ secrets.show-notifications }}
        REACT_APP_AUTHENTICATION_HOST: ${{ secrets.authentication-host }}
        REACT_APP_GRAASP_COMPOSE_HOST: ${{ secrets.graasp-compose-host }}
        REACT_APP_GRAASP_PERFORM_HOST: ${{ secrets.graasp-perform-host }}
        REACT_APP_GRAASP_EXPLORE_HOST: ${{ secrets.graasp-explorer-host }}
        REACT_APP_GRAASP_ANALYZER_HOST: ${{ secrets.graasp-analyzer-host }}
        REACT_APP_GA_MEASUREMENT_ID: ${{ secrets.ga-measurement-id }}
        REACT_APP_HIDDEN_ITEM_TAG_ID: ${{ secrets.hidden-item-tag-id }}
        REACT_APP_DOMAIN: ${{ secrets.domain }}
      # Run a set of commands using the runners shell to perform install and build
      run: |
        yarn run build

    - name: Cache build
      id: cache-build
      uses: actions/cache@v3
      with:
          path: build
          key: ${{ runner.os }}-build-${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ github.ref_name }}-
            ${{ runner.os }}-build-

  test:
    name: Test
    needs: build

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3
    # Download and cache distribution of the requested Node.js version, and add it to the PATH
    - name: Setup node
      id: setup-node
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        check-latest: true

    - name: Cache dependencies
      id: cache-node-modules
      uses: actions/cache@v3
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ github.ref_name }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
            ${{ runner.os }}-modules-${{ github.ref_name }}-
            ${{ runner.os }}-modules-

    - name: Cache Cypress Binary
      id: cache-cypress-binary
      uses: actions/cache@v3
      with:
        path: '~/.cache/Cypress'
        key: ${{ runner.os }}-cypress-binary-${{ github.ref_name }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
            ${{ runner.os }}-cypress-binary-${{ github.ref_name }}-
            ${{ runner.os }}-cypress-binary-

    - name: Install dependencies
      id: install
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: yarn install

    - name: Install dependencies
      if: steps.cache-cypress-binary.outputs.cache-hit != 'true'
      uses: cypress-io/github-action@v4
      with:
        # just perform install
        runTests: false

    - name: Cypress run
      uses: cypress-io/github-action@v4
      with:
        install: false
        config: baseUrl=http://localhost:3000
        start: yarn start:ci
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 180
        browser: chrome
        quiet: true
      env:
        REACT_APP_API_HOST: ${{ secrets.api-host-test }}
        REACT_APP_GRAASP_COMPOSE_HOST: ${{ inputs.graasp-compose-host-test }}
        REACT_APP_AUTHENTICATION_HOST: ${{ inputs.graasp-authentication-host-test }}
        REACT_APP_NODE_ENV: ${{ inputs.node-env-test }}
        REACT_APP_HIDDEN_ITEM_TAG_ID: ${{ inputs.hidden-item-tag-id-test }}
        REACT_APP_PUBLIC_TAG_ID: ${{ inputs.public-tag-id-test }}
        NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ inputs.next-public-google-analytics-id-test }}
        NEXT_PUBLIC_PUBLISHED_TAG_ID: ${{ inputs.next-public-published-tag-id-test }}
        NEXT_PUBLIC_API_HOST: ${{ inputs.next-public-api-host-test }}
        NEXT_PUBLIC_GRAASP_AUTH_HOST: ${{ inputs.next-public-graasp-authentication-host-test }}
        NEXT_PUBLIC_GRAASP_PERFORM_HOST: ${{ inputs.next-public-graasp-perform-host-test }}
        GRAASPER_ID: ${{ inputs.graasper-id-test }}
        NEXT_PUBLIC_NODE_ENV: ${{ inputs.next-public-node-env-test }}
        REACT_APP_GRAASP_DOMAIN: ${{ inputs.graasp-domain-test }}
        REACT_APP_GRAASP_APP_ID: ${{ inputs.graasp-app-id-test }}
        REACT_APP_MOCK_API: ${{ inputs.mock-api-test }}
        NODE_ENV: ${{ inputs.node-env-test}}
        REACT_APP_ENABLE_MOCK_API: ${{ inputs.enable-mock-api-test }}

    # after the test run completes
    # store any screenshots
    # NOTE: screenshots will be generated only if E2E test failed
    # thus we store screenshots only on failures
    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots

    - name: coverage report
      run: npx nyc report --reporter=text-summary

  # Deploy to development environment
  deploy: 
    needs: test
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Cache build
      id: cache-build
      uses: actions/cache@v3
      with:
          path: build
          key: ${{ runner.os }}-build-${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ github.ref_name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

    # Configure AWS credential and region environment variables for use in next steps
    - name: Configure AWS Credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ secrets.aws-region }}

    # Recursively copy new and updated files from the source directory to the destination
    - name: Sync files with AWS S3 Bucket
      id: sync-s3
      # Set environment variable with the name of the destination bucket to perform sync. It is only available to this step
      env:
        APP_DIR: '${{ secrets.aws-s3-bucket-name }}'
      run: aws s3 sync ${{env.BUILD_FOLDER}} s3://${APP_DIR} --acl public-read --follow-symlinks --delete
      # --acl public-read makes files publicly readable 
      # --follow-symlinks fixes some weird symbolic link problems that may come up
      # --delete permanently deletes files in the S3 bucket that are not present in the latest version of the repository/build.

    # Create a new invalidation
    - name: Invalidate cloudfront distribution
      id: invalidate-cloudfront
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.cloudfront-distribution-id }} --paths "/*"

name: Reusable workflow that runs Cypress tests and Type-checking

# Control when the action will run
on:
  # Allow the workflow to be reusable
  workflow_call:
    # Define inputs which can be passed from the caller workflow
    inputs:
      # workflow specific inputs
      tsc:
        required: false
        type: string
        default: true

      # build specific inputs
      graasp-compose-host-test:
        required: false
        type: string
      graasp-authentication-host-test:
        required: false
        type: string
      node-env-test:
        required: false
        type: string
      hidden-item-tag-id-test:
        required: false
        type: string
      public-tag-id-test:
        required: false
        type: string
      next-public-google-analytics-id-test:
        required: false
        type: string
      next-public-published-tag-id-test:
        required: false
        type: string
      next-public-api-host-test:
        required: false
        type: string
      next-public-graasp-analytics-host-test:
        required: false
        type: string
      next-public-graasp-perform-host-test:
        required: false
        type: string
      next-public-graasp-auth-host-test:
        required: false
        type: string
      next-public-node-env-test:
        required: false
        type: string
      next-public-graasper-id-test:
        required: false
        type: string
      graasper-id-test:
        required: false
        type: string
      graasp-domain-test:
        required: false
        type: string
      graasp-app-id-test:
        required: false
        type: string
      mock-api-test:
        required: false
        type: string
      enable-mock-api-test:
        required: false
        type: string

    # Define secrets which can be passed from the caller workflow
    secrets:
      api-host-test:
        required: false

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# Set environment variables that are available to the steps of all jobs in the workflow
env:
  # Allows to increase Node's max heap size
  NODE_OPTIONS: '--max_old_space_size=8192'

jobs:
  install:
    name: Yarn Install and Cache
    runs-on: ubuntu-latest
    steps:
      # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      - name: Yarn Install and Cache
        uses: graasp/graasp-deploy/.github/actions/yarn-install-and-cache@v1
        with:
          cypress: true

  tsc:
    name: Type Checking
    if: inputs.tsc == 'true'
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      - name: Yarn install and Cache dependencies
        uses: graasp/graasp-deploy/.github/actions/yarn-install-and-cache@v1

      # type check
      - name: Check out code
        run: tsc --noEmit

  cypress:
    name: Cypress
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      - name: Yarn install and Cache dependencies
        uses: graasp/graasp-deploy/.github/actions/yarn-install-and-cache@v1
        with:
          cypress: true

      #  use the Cypress GitHub Action to run Cypress tests within the chrome browser
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          install: false
          config: baseUrl=http://localhost:3000
          start: yarn start:ci
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 250
          browser: chrome
          quiet: true
          cache-key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
        env:
          NEXT_PUBLIC_API_HOST: ${{ inputs.next-public-api-host-test }}
          NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ inputs.next-public-google-analytics-id-test }}
          NEXT_PUBLIC_GRAASP_ANALYTICS_HOST: ${{ inputs.next-public-graasp-analytics-host-test }}
          NEXT_PUBLIC_GRAASP_AUTH_HOST: ${{ inputs.next-public-graasp-auth-host-test }}
          NEXT_PUBLIC_GRAASP_PERFORM_HOST: ${{ inputs.next-public-graasp-perform-host-test }}
          NEXT_PUBLIC_GRAASPER_ID: ${{ inputs.next-public-graasper-id-test }}
          NEXT_PUBLIC_NODE_ENV: ${{ inputs.next-public-node-env-test }}
          NEXT_PUBLIC_PUBLISHED_TAG_ID: ${{ inputs.next-public-published-tag-id-test }}
          NODE_ENV: ${{ inputs.node-env-test}}
          REACT_APP_API_HOST: ${{ secrets.api-host-test }}
          REACT_APP_AUTHENTICATION_HOST: ${{ inputs.graasp-authentication-host-test }}
          REACT_APP_ENABLE_MOCK_API: ${{ inputs.enable-mock-api-test }}
          REACT_APP_GRAASP_APP_ID: ${{ inputs.graasp-app-id-test }}
          REACT_APP_GRAASP_COMPOSE_HOST: ${{ inputs.graasp-compose-host-test }}
          REACT_APP_GRAASP_DOMAIN: ${{ inputs.graasp-domain-test }}
          REACT_APP_HIDDEN_ITEM_TAG_ID: ${{ inputs.hidden-item-tag-id-test }}
          REACT_APP_MOCK_API: ${{ inputs.mock-api-test }}
          REACT_APP_NODE_ENV: ${{ inputs.node-env-test }}
          REACT_APP_PUBLIC_TAG_ID: ${{ inputs.public-tag-id-test }}

      # after the test run completes
      # store any screenshots
      # NOTE: screenshots will be generated only if E2E test failed
      # thus we store screenshots only on failures
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: coverage report
        run: npx nyc report --reporter=text-summary

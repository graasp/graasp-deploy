name: Reusable workflow that runs Continuous Integration pipeline for ECS deployments

# Control when the action will run
on:
  # Allow the workflow to be reusable
  workflow_call:
    # Define inputs which can be passed from the caller workflow
    inputs:
      # ecs-task-definition: path to task definition json template
      ecs-task-definition:
        required: true
        type: string
      graasper-id-test:
        required: false
        type: string
      next-public-google-analytics-id-test:
        required: false
        type: string
      next-public-published-tag-id-test:
        required: false
        type: string
      next-public-api-host-test:
        required: false
        type: string
      next-public-graasp-perform-host-test:
        required: false
        type: string
      next-public-graasp-authentication-host-test:
        required: false
        type: string
      next-public-node-env-test:
        required: false
        type: string
      test-execution:
        required: true
        type: boolean
        default: true
    # Define secrets which can be passed from the caller workflow
    secrets:
      # AWS credentials and variables
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true           
      ecs-cluster:
        required: true
      ecs-service:
        required: true
      ecr-repository:
        required: true
      # container name that will be included in the cluster
      container-name-explorer:
        required: true
      # Environment variables
      next-public-api-host: 
        required: true
      next-public-google-analytics-id:
        required: true
      next-public-graasp-auth-host: 
        required: true
      next-public-graasp-builder-host:
        required: true
      next-public-graasp-perform-host:
        required: true
      next-public-graasper-id:
        required: true
      next-public-published-tag-id:
        required: true
      next-public-sentry-dsn:
        required: false
      next-public-domain:
        required: false
      port:
        required: true

# Saving computation time by stopping obsolete workflows
concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

# Set environment variables that are available to the steps of all jobs in the workflow
env:        
  ECS_TASK_DEFINITION: ${{ inputs.ecs-task-definition }}
  CONTAINER_NAME: ${{ secrets.container-name-explorer }}
  ECR_REPOSITORY: ${{ secrets.ecr-repository }}
  # Allows to increase Node's max heap size
  NODE_OPTIONS: '--max_old_space_size=8192'

# This workflow is made up of two jobs that run sequentially, called build and deploy
jobs:
  # Build image and push to ECR
  build:
    name: Build
    runs-on: ubuntu-latest
    # Define job output that is available to all downstream jobs that depend on this job
    outputs: 
      tag: ${{ steps.tag-number.outputs.tag }}

    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v2
    
    # Set output variable tag with the current checked out ref
    - name: Set Tag Number
      id: tag-number
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    # Configure AWS credential and region environment variables for use in next steps
    - name: Configure AWS Credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ secrets.aws-region }}

    # Log in the local Docker client
    - name: Login to Amazon ECR
      id: login-ecr-build
      uses: aws-actions/amazon-ecr-login@v1

    # Build and tag the docker image 
    - name: Build, tag and push image to AWS ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-build.outputs.registry }}
        IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  test:
    name: Test
    needs: build
    if: inputs.test-execution == true
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3

    # Download and cache distribution of the requested Node.js version, and add it to the PATH
    - name: Setup node
      id: setup-node
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        check-latest: true

    # Get the yarn cache path.
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: |
        echo "::set-output name=dir::$(yarn config get cacheFolder)"

    # Cache dependencies to speed up workflow. Only for development branches
    # path: The file path on the runner to cache or restore.
    # key: Create cache key using the hashFiles function to create a new cache when dependencies change.
    # restore-keys: An ordered list of alternative keys to use for finding the cache if no cache hit occurred for key
    - name: Cache dependencies
      id: cache-yarn
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    # Cache cypress binary to speed up workflow
    # path: The file path on the runner to cache or restore.
    # key: Create cache key using the hashFiles function to create a new cache when dependencies change.
    # restore-keys: An ordered list of alternative keys to use for finding the cache if no cache hit occurred for key
    - name: Cache Cypress Binary
      id: cache-cypress-binary
      uses: actions/cache@v3
      with:
        path: '~/.cache/Cypress'
        key: ${{ runner.os }}-cypress-binary-${{ hashFiles('**/yarn.lock') }}

    # Install dependencies
    - name: Install dependencies
      id: install
      run: yarn add --cached

    #  use the Cypress GitHub Action to run Cypress tests within the chrome browser
    - name: Cypress run
      uses: cypress-io/github-action@v4
      with:
        install: false
        config: baseUrl=http://localhost:3000
        start: yarn start:ci
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 180
        browser: chrome
        quiet: true
      env:
        GRAASPER_ID: ${{ inputs.graasper-id-test }}
        NEXT_PUBLIC_API_HOST: ${{ inputs.next-public-api-host-test }}
        NEXT_PUBLIC_GRAASP_AUTH_HOST: ${{ inputs.next-public-graasp-authentication-host-test }}
        NEXT_PUBLIC_GRAASP_PERFORM_HOST: ${{ inputs.next-public-graasp-perform-host-test }}
        NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ inputs.next-public-google-analytics-id-test }}
        NEXT_PUBLIC_NODE_ENV: ${{ inputs.next-public-node-env-test }}
        NEXT_PUBLIC_PUBLISHED_TAG_ID: ${{ inputs.next-public-published-tag-id-test }}

    # after the test run completes
    # store any screenshots
    # NOTE: screenshots will be generated only if E2E test failed
    # thus we store screenshots only on failures
    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots

    - name: coverage report
      run: npx nyc report --reporter=text-summary

  # Deploy to dev environment
  deploy: 
    name: Deploy
    needs: [build, test]
    if: ${{ always() && needs.build.result == 'success' && ((github.event_name == 'workflow_dispatch') || (github.ref_name == 'master')) }}
    runs-on: ubuntu-latest

    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v2

    # Configure AWS credential and region environment variables for use in next steps
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ secrets.aws-region }}

    # Log in the local Docker client
    - name: Login to Amazon ECR
      id: login-ecr-deploy
      uses: aws-actions/amazon-ecr-login@v1

    # Insert a container image URI into template Amazon ECS task definition JSON file, creating a new task definition file.
    - name: Fill Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      # Set environment variables required to create the task definition file. These are only available to this step
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
        IMAGE_TAG: ${{ needs.build.outputs.tag }}
      with:
          task-definition: ${{ inputs.ecs-task-definition }}
          container-name: ${{ secrets.container-name-explorer }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          environment-variables: |
            NEXT_PUBLIC_API_HOST=${{ secrets.next-public-api-host }}
            NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=${{ secrets.next-public-google-analytics-id }}
            NEXT_PUBLIC_GRAASP_AUTH_HOST=${{ secrets.next-public-graasp-auth-host }}
            NEXT_PUBLIC_GRAASP_BUILDER_HOST=${{ secrets.next-public-graasp-builder-host }}
            NEXT_PUBLIC_API_HOST=${{ secrets.next-public-api-host }}
            NEXT_PUBLIC_GRAASP_PERFORM_HOST=${{ secrets.next-public-graasp-perform-host }}
            NEXT_PUBLIC_GRAASPER_ID=${{ secrets.next-public-graasper-id }}
            NEXT_PUBLIC_PUBLISHED_TAG_ID=${{ secrets.next-public-published-tag-id }}
            NEXT_PUBLIC_SENTRY_DSN=${{ secrets.next-public-sentry-dsn }}
            NEXT_PUBLIC_DOMAIN=${{ secrets.next-public-domain }}
            PORT=${{ secrets.port }}

    # Use latest revision of the task-definition to deploy the application to ECS
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ecs-service }}
          cluster: ${{ secrets.ecs-cluster }}
          wait-for-service-stability: true

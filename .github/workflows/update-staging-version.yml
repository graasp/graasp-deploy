name: Reusable workflow that creates and pushes a new tag to graasp-deploy repository

# Controls when the action will run.
on:
  # Allow the workflow to be reusable
  workflow_call:
    # Define inputs which can be passed from the caller workflow
    inputs:
      # release-type: specify release type between first, patch, minor or major
      release-type:
        required: true
        type: string
    secrets:
      # GH repo PAT
      token:
        required: true

# Set environment variables that are available to the steps of all jobs in the workflow
env:
  # Allows to increase Node's max heap size
  NODE_OPTIONS: '--max_old_space_size=8192'

# This workflow is made up of one job called create-release-candidate
jobs:
  # Create a json with the repository name and tag and pass it to graasp-deploy repository
  create-release-candidate:
    name: Create new candidate
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.token }}

    # Get the yarn cache path.
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: |
        echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    - name: Yarn install and Cache dependencies
      uses: graasp/graasp-deploy/.github/actions/yarn-install-and-cache@v1

    # Run a set of commands using the runners shell to configure bot user
    - name: Git config
      id: git-config
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Configuration for major release type
      if: ${{ inputs.release-type == 'major' }}
      run: yarn run release:major

    - name: Configuration for minor release type
      if: ${{ inputs.release-type == 'minor' }}
      run: yarn run release:minor

    - name: Configuration for patch release type
      if: ${{ inputs.release-type == 'patch' }}
      run: yarn run release:patch

    - name: Configuration for first release type
      if: ${{ inputs.release-type == 'first' }}
      run: yarn run release:first

    # Run a set of commands using the runners shell to push the tag
    - name: Push tag
      run: git push --follow-tags

    # Get the latest tag and create a json with the repository name and tag
    # "{name}={value}" >> $GITHUB_OUTPUT Sets an output parameter for this step.
    - name: Set tag
      id: set-tag
      run: |
        REPOSITORY=$(echo '${{ github.repository }}')
        TAG=$(git tag)
        JSON=$(jq -c --null-input --arg repository "$REPOSITORY" --arg tag "$TAG" '{"repository": $repository, "tag": $tag}')
        echo "json=$JSON" >> $GITHUB_OUTPUT

    # Trigger an 'on: repository_dispatch' workflow to run in graasp-deploy repository
    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.token }}
        repository: graasp/graasp-deploy
        event-type: update-staging-version
        client-payload: ${{steps.set-tag.outputs.json}}

name: Reusable workflow that runs Continuous Integration pipeline for ECS deployments

# Control when the action will run
on:
  # Allow the workflow to be reusable
  workflow_call:
    # Define inputs which can be passed from the caller workflow
    inputs:
      # automatic npm env variables
      app-name:
        required: true
        type: string
      app-version:
        required: true
        type: string
      # ecs-task-definition: path to task definition json template
      ecs-task-definition:
        required: true
        type: string
      environment:
        required: true
        type: string

    # Define secrets which can be passed from the caller workflow
    secrets:
      # AWS credentials and variables
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      ecs-cluster:
        required: true
      ecs-service:
        required: true
      ecr-repository:
        required: true
      next-public-ga-measurement-id:
        required: true
      next-public-sentry-dsn:
        required: false

# Set environment variables that are available to the steps of all jobs in the workflow
env:
  APP_NAME: ${{ inputs.app-name }}
  APP_VERSION: ${{ inputs.app-version }}
  ECS_TASK_DEFINITION: ${{ inputs.ecs-task-definition }}
  # CONTAINER_NAME: ${{ vars.container-name-library }}
  ECR_REPOSITORY: ${{ secrets.ecr-repository }}
  # Allows to increase Node's max heap size
  NODE_OPTIONS: '--max_old_space_size=8192'

# This workflow is made up of three jobs that run sequentially, called test, build and deploy
jobs:
  test:
    name: Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3

    # This step runs a single command to execute unitary testing
    - name: Test job
      run: |
        echo "This is the test job"

  # Build image and push to ECR
  build:
    needs: test
    name: Build
    runs-on: ubuntu-latest
    # Define job output that is available to all downstream jobs that depend on this job
    outputs:
      tag: ${{ steps.tag-number.outputs.tag }}

    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3

    # Set output variable tag with the current checked out ref
    - name: Set Tag Number
      id: tag-number
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

    # Configure AWS credential and region environment variables for use in next steps
    - name: Configure AWS Credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ vars.AWS_REGION }}

    # Log in the local Docker client
    - name: Login to Amazon ECR
      id: login-ecr-build
      uses: aws-actions/amazon-ecr-login@v1

    # Build and tag the docker image
    - name: Build, tag and push image to AWS ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-build.outputs.registry }}
        IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # Deploy to dev environment
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3

    # Configure AWS credential and region environment variables for use in next steps
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ vars.AWS_REGION }}

    # Log in the local Docker client
    - name: Login to Amazon ECR
      id: login-ecr-deploy
      uses: aws-actions/amazon-ecr-login@v1

    # Insert a container image URI into template Amazon ECS task definition JSON file, creating a new task definition file.
    - name: Fill Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      # Set environment variables required to create the task definition file. These are only available to this step
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
        IMAGE_TAG: ${{ needs.build.outputs.tag }}
      with:
          task-definition: ${{ inputs.ecs-task-definition }}
          container-name: ${{ vars.CONTAINER_NAME_GRAASP_LIBRARY }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          environment-variables: |
            NEXT_PUBLIC_APP_NAME=${{ env.APP_NAME }}
            NEXT_PUBLIC_APP_VERSION=${{ env.APP_VERSION }}

            NEXT_PUBLIC_API_HOST=${{ vars.API_HOST }}
            NEXT_PUBLIC_DOMAIN=${{ vars.DOMAIN }}
            NEXT_PUBLIC_GRAASP_ANALYTICS_HOST=${{ vars.GRAASP_ANALYTICS_HOST }}
            NEXT_PUBLIC_GRAASP_AUTH_HOST=${{ vars.GRAASP_AUTH_HOST }}
            NEXT_PUBLIC_GRAASP_BUILDER_HOST=${{ vars.GRAASP_BUILDER_HOST }}
            NEXT_PUBLIC_GRAASP_PERFORM_HOST=${{ vars.GRAASP_PLAYER_HOST }}
            NEXT_PUBLIC_GRAASPER_ID=${{ vars.GRAASPER_ID }}
            PORT=${{ vars.PORT }}

            NEXT_PUBLIC_GA_MEASUREMENT_ID=${{ secrets.next-public-ga-measurement-id }}
            NEXT_PUBLIC_SENTRY_DSN=${{ secrets.next-public-sentry-dsn }}

    # Use latest revision of the task-definition to deploy the application to ECS
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ecs-service }}
          cluster: ${{ secrets.ecs-cluster }}
          wait-for-service-stability: true

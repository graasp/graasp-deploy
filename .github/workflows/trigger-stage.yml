# This workflow takes the latest YYYYMMddhhmm-staging-versions.json file inside the staging-versions folder
# and triggers all the cdelivery workflows in the different repositories.
name: Deploy stack to stage

# Controls when the action will run.
on:
  # Allow the workflow to be automatically triggered every Monday at 9 a.m.
  schedule:
    - cron: '0 9 * * 1'
  # Allow the workflow to be manually triggered
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      stack:
        # Description to be shown in the UI instead of 'stack'
        description: '(Optional) Specify a stack. Format: YYYYMMddhhmm-staging-versions.json'
        # Default value if no value is explicitly provided
        default: ''
        # Input does not have to be provided for the workflow to run
        required: false

env:
  STACK: ${{ inputs.stack }}

jobs:
  generate-matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      latest: ${{ steps.latest-staging-file.outputs.latest }}

    steps:
    - name: Deploying a specific stack
      if: "${{ env.STACK != '' }}"
      run: echo ${{ env.STACK }}

    # Check-out repository under $GITHUB_WORKSPACE, so the job can access it
    - name: Check out code
      uses: actions/checkout@v3

    # Set the appropriate job output based on the stack that is being deployed: custom or latest.
    - name: Get latest staging versions file
      id: latest-staging-file
      run: |
        if [[ "${{ inputs.stack }}" == "" ]]; then
          cd ./staging-versions
          LATEST_FILE_NAME_STAGING=$(ls -Ar | head -n 1)
          echo "latest=$LATEST_FILE_NAME_STAGING" >> $GITHUB_OUTPUT
        fi
        if [[ "${{ inputs.stack }}" != "" ]]; then
          LATEST_FILE_NAME_STAGING=${{ env.STACK }}
          echo "latest=$LATEST_FILE_NAME_STAGING" >> $GITHUB_OUTPUT
        fi

    # Install the python version needed
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    # Run compare.py to get the difference between the newer and the already deployed versions
    - name: Execute py script
      env:
        LATEST_FILE_NAME_STAGING: ${{ steps.latest-staging-file.outputs.latest }}
      run: |
        python scripts/compare.py staging-versions/$LATEST_FILE_NAME_STAGING deployed/current-staging-versions.json

    # Load latest json from a file
    - name: Generate matrix
      id: set-matrix
      run: |
        STACK_LENGTH=$(cat diff.json | jq '.include | length')
        if [[ "$STACK_LENGTH" -gt 0 ]]; then
          LATEST_FILE=$(cat diff.json)
          echo "matrix=$LATEST_FILE" >> $GITHUB_OUTPUT
          echo '### New versions detected! :bookmark:' >> $GITHUB_STEP_SUMMARY
          NEW_STACK=$(cat diff.json | jq -r '.include[] | {repository,tag}| join(" - tag: ")')
          echo $NEW_STACK >> $GITHUB_STEP_SUMMARY
        else
          echo '### No new versions detected! :hankey:' >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  dispatch:
    name: Dispatch Continuous Delivery workflows
    needs: generate-matrix
    runs-on: ubuntu-latest
    # The environment that the job will reference
    environment:
      name: staging
    strategy:
      # Uses fromJson to parse the output and set a matrix variable.
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    steps:
    - name: Set json output
      id: set-json
      env:
        TAG: ${{matrix.tag}}
      run: |
        JSON=$(jq -c --null-input --arg tag "$TAG" '{"tag": $tag}')
        echo "json=$JSON" >> $GITHUB_OUTPUT

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ matrix.repository }}
        event-type: staging-deployment
        client-payload: ${{steps.set-json.outputs.json}}

    - name: Generate step summary markdown
      env:
        BADGE: 'https://badgen.net/badge/icon/See%20workflow/blue?icon=github&label'
      run: |
        echo '[![See workflow](${{env.BADGE}})](https://github.com/${{matrix.repository}}/actions/)' >> $GITHUB_STEP_SUMMARY

  update-deployed-stack:
    name: Update deployed staging stack
    needs: [generate-matrix, dispatch]
    runs-on: ubuntu-latest
    environment:
      name: staging
    outputs:
      commit-hash: ${{ steps.commit.outputs.commit_hash }}
    env:
      LATEST_FILE_NAME_STAGING: ${{ needs.generate-matrix.outputs.latest }}
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Update current-staging-versions file
      id: update-current-staging-versions-file
      run: |
        cd ./staging-versions
        cp $LATEST_FILE_NAME_STAGING ../deployed/current-staging-versions.json

    - name: Commit step
      id: commit
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: 'chore(deploy): deploy new stack to staging environment'

    - name: Set commit hash output
      run: |
        echo "commit-hash=${{ steps.commit.outputs.commit_hash }}" >> $GITHUB_OUTPUT
        echo '### New stack deployed! :rocket:' >> $GITHUB_STEP_SUMMARY

  test:
    name: Test
    needs: [dispatch, update-deployed-stack]
    runs-on: ubuntu-latest
    steps:
      - run: echo 'Test job'

  promote:
    name: Promote stack to release ready
    needs: [generate-matrix, dispatch, update-deployed-stack, test]
    runs-on: ubuntu-latest
    environment:
      name: staging
    env:
      LATEST_FILE_NAME_STAGING: ${{ needs.generate-matrix.outputs.latest }}
    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        ref: ${{ needs.update-deployed-stack.outputs.commit-hash }}

    # Create new staging-versions.json file
    - name: Create new release-versions.json file name
      run: |
        RELEASE_FILE_NAME=$(echo "`date +"%Y%m%d%H%M"`"-release-versions.json)
        echo "RELEASE_FILE_NAME=$RELEASE_FILE_NAME" >> $GITHUB_ENV

    - name: Update latest release versions file
      id: update-latest-release-file
      env:
        RELEASE_FILE_NAME: ${{ env.RELEASE_FILE_NAME }}
      run: |
        cd ./staging-versions
        cp $LATEST_FILE_NAME_STAGING ../release-versions/$RELEASE_FILE_NAME

    - name: Keep changes in detached HEAD step
      run: |
        git branch tmp
        git fetch
        git checkout main
        git merge tmp

    - name: Commit step
      id: commit
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: 'chore: promote new stack to release ready'

    - name: Generate job summary markdown
      run: |
        echo '### New stack promoted! :boom:' >> $GITHUB_STEP_SUMMARY
